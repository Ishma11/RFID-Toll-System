#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>

#define RST_PIN 9
#define SS_PIN 10
#define AMOUNT_TO_DEDUCT 10
#define LOW_BALANCE_THRESHOLD 10
#define JOY_BUTTON_PIN 8      // Joystick button connected to pin 8
#define RECHARGE_AMOUNT 50
#define HOLD_DURATION 3000    // milliseconds to consider as long hold

MFRC522 mfrc522(SS_PIN, RST_PIN);
LiquidCrystal_I2C lcd(0x27, 16, 2);
Servo servo;

String ID = "";

unsigned long holdStart = 0;
bool isHolding = false;

// Define wallet structure
struct Wallet {
  String uid;
  int balance;
};

Wallet users[] = {
  {"83C9CDF4", 28},
  {"DEADBEEF", 30},
  {"A1B2C3D4", 100}
};

const int numUsers = sizeof(users) / sizeof(users[0]);

void setup() {
  SPI.begin();
  mfrc522.PCD_Init();

  lcd.init();
  lcd.backlight();

  servo.attach(6);
  servo.write(0);

  pinMode(JOY_BUTTON_PIN, INPUT_PULLUP);  // Joystick button connected to pin 8

  lcd.setCursor(0, 0);
  lcd.print("Scan Your Card...");
}

void loop() {
  if (!mfrc522.PICC_IsNewCardPresent()) {
    checkJoystickPress();
    return;
  }

  if (!mfrc522.PICC_ReadCardSerial()) return;

  ID = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    ID += String(mfrc522.uid.uidByte[i], HEX);
  }
  ID.toUpperCase();

  int userIndex = findUser(ID);

  lcd.clear();

  if (userIndex != -1) {
    if (users[userIndex].balance >= AMOUNT_TO_DEDUCT) {
      users[userIndex].balance -= AMOUNT_TO_DEDUCT;

      lcd.setCursor(0, 0);
      lcd.print("ACCESS GRANTED!");
      lcd.setCursor(0, 1);
      lcd.print("Bal: Rs ");
      lcd.print(users[userIndex].balance);
      openServo();

      delay(3000);

      // Check if balance dropped below warning threshold
      if (users[userIndex].balance < LOW_BALANCE_THRESHOLD) {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Low Balance!");
        lcd.setCursor(0, 1);
        lcd.print("Recharge soon");
        delay(2000);
      }

    } else {
      lcd.setCursor(0, 0);
      lcd.print("ACCESS DENIED!");
      lcd.setCursor(0, 1);
      lcd.print("Insufficient Rs");
    }
  } else {
    lcd.setCursor(0, 0);
    lcd.print("ACCESS DENIED!");
    lcd.setCursor(0, 1);
    lcd.print("Unknown Card");
  }

  delay(3000);
  closeServo();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Scan Your Card...");

  mfrc522.PICC_HaltA();
}

// Checks for joystick button press to recharge
void checkJoystickPress() {
  if (digitalRead(JOY_BUTTON_PIN) == LOW) { // Joystick button pressed (button is active LOW)
    rechargeCard();
  }
}

void rechargeCard() {
  if (ID == "") return; // No card scanned yet

  int index = findUser(ID);
  if (index != -1) {
    users[index].balance += RECHARGE_AMOUNT;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Recharge Done!");
    lcd.setCursor(0, 1);
    lcd.print("Bal: Rs ");
    lcd.print(users[index].balance);
    delay(3000);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Scan Your Card...");
  }
}

int findUser(String uid) {
  for (int i = 0; i < numUsers; i++) {
    if (users[i].uid == uid) return i;
  }
  return -1;
}

void openServo() {
  servo.write(90);
  delay(1000);
}

void closeServo() {
  servo.write(0);
  delay(1000);
}
